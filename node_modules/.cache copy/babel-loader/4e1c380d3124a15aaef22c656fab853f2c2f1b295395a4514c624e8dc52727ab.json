{"ast":null,"code":"import { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport getAllConfigs from 'tailwindcss/lib/util/getAllConfigs';\nimport resolveConfig from 'tailwindcss/lib/util/resolveConfig';\nvar _excluded = [\"theme\"];\nfunction processTheme(theme, _ref) {\n  var exclude = _ref.exclude,\n    replacer = _ref.replacer;\n  var replacedTheme = theme;\n  Object.entries(replacedTheme).forEach(function (_ref2) {\n    var key = _ref2[0],\n      value = _ref2[1];\n    if ((exclude != null ? exclude : []).includes(key)) return;\n    var val;\n    switch (typeof value) {\n      case 'object':\n        val = processTheme(value, {\n          exclude: exclude,\n          replacer: replacer\n        });\n        break;\n      case 'string':\n        val = replacer(value);\n        break;\n      default:\n        val = value;\n    }\n    replacedTheme[key] = val;\n  });\n  return replacedTheme;\n}\nvar replaceTailwindUnit = function replaceTailwindUnit(opts) {\n  return function (userConfig) {\n    var _resolveConfig = resolveConfig([].concat(getAllConfigs(userConfig))),\n      theme = _resolveConfig.theme,\n      config = _objectWithoutPropertiesLoose(_resolveConfig, _excluded);\n    return _extends({}, config, {\n      theme: processTheme(theme, opts)\n    });\n  };\n};\nfunction toEM(value) {\n  var remUnitRegex = /\"[^\"]+\"|'[^']+'|url\\([^)]+\\)|(\\d*\\.?\\d+)rem/g;\n  return value.replace(remUnitRegex, function (match, remDigit) {\n    var amount = Number(remDigit);\n    if (Number.isNaN(amount)) {\n      return match;\n    }\n    return amount + \"em\";\n  });\n}\nexport { processTheme, replaceTailwindUnit, toEM };","map":{"version":3,"names":["processTheme","theme","_ref","exclude","replacer","replacedTheme","Object","entries","forEach","_ref2","key","value","includes","val","replaceTailwindUnit","opts","userConfig","_resolveConfig","resolveConfig","concat","getAllConfigs","config","_objectWithoutPropertiesLoose","_excluded","_extends","toEM","remUnitRegex","replace","match","remDigit","amount","Number","isNaN"],"sources":["C:\\Users\\이세희\\Documents\\project_oyr\\node_modules\\@sajari\\react-sdk-utils\\src\\styles\\tailwind-unit-replace.ts"],"sourcesContent":["import getAllConfigs from 'tailwindcss/lib/util/getAllConfigs';\nimport resolveConfig from 'tailwindcss/lib/util/resolveConfig';\nimport type { TailwindConfig } from 'tailwindcss/tailwind-config';\n\ninterface Options {\n  exclude: (keyof TailwindConfig['theme'])[];\n  replacer: (v: string) => string;\n}\n\n// recursively walks object/array to find a string value,\n// then apply `replacer` to it\nexport function processTheme(\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  theme: Record<string, {} | string>,\n  { exclude, replacer }: Omit<Options, 'exclude'> & { exclude: string[] },\n) {\n  const replacedTheme = theme; // might need to deep clone this, but seems unecessary\n  // also work for array\n  Object.entries(replacedTheme).forEach(([key, value]) => {\n    if ((exclude ?? []).includes(key)) return;\n\n    let val;\n    switch (typeof value) {\n      case 'object':\n        val = processTheme(value, { exclude, replacer });\n        break;\n      case 'string':\n        val = replacer(value);\n        break;\n      default:\n        val = value;\n    }\n    replacedTheme[key] = val;\n  });\n\n  return replacedTheme;\n}\n\nexport const replaceTailwindUnit = (opts: Options) => (userConfig: TailwindConfig): TailwindConfig => {\n  // mimics the way Tailwind resolve user's config\n  // https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/resolveConfig.js#L259\n  // https://github.com/tailwindlabs/tailwindcss/blob/master/src/util/getAllConfigs.js\n  const { theme, ...config } = resolveConfig([...getAllConfigs(userConfig)]);\n  return {\n    ...config,\n    theme: processTheme(theme, opts),\n  };\n};\n\nexport function toEM(value: string) {\n  // Taken from https://github.com/jesstech/postcss-rem-to-pixel/blob/master/lib/rem-unit-regex.js#L9\n  // Not anything inside double quotes\n  // Not anything inside single quotes\n  // Not anything inside url()\n  // Any digit followed by rem\n  // !singlequotes|!doublequotes|!url()|remunit\n  const remUnitRegex = /\"[^\"]+\"|'[^']+'|url\\([^)]+\\)|(\\d*\\.?\\d+)rem/g;\n\n  return value.replace(remUnitRegex, (match, remDigit) => {\n    // replace REM-contained value\n    const amount = Number(remDigit);\n    if (Number.isNaN(amount)) {\n      return match;\n    }\n    return `${amount}em`;\n  });\n}\n"],"mappings":";;;;SAWgBA,aAEdC,KAAA,EAAAC,IAAA;MACEC,OAAA,GAAAD,IAAA,CAAAC,OAAA;IAASC,QAAA,GAAAF,IAAA,CAAAE,QAAA;EAEX,IAAMC,aAAa,GAAGJ,KAAtB;EAEAK,MAAM,CAACC,OAAP,CAAeF,aAAf,EAA8BG,OAA9B,CAAsC,UAAAC,KAAA;QAAEC,GAAA,GAAAD,KAAA;MAAKE,KAAA,GAAAF,KAAA;IAC3C,IAAI,CAACN,OAAD,WAACA,OAAD,GAAY,EAAZ,EAAgBS,QAAhB,CAAyBF,GAAzB,CAAJ,EAAmC;IAEnC,IAAIG,GAAJ;IACA,QAAQ,OAAOF,KAAf;MACE,KAAK,QAAL;QACEE,GAAG,GAAGb,YAAY,CAACW,KAAD,EAAQ;UAAER,OAAO,EAAPA,OAAF;UAAWC,QAAQ,EAARA;SAAnB,CAAlB;QACA;MACF,KAAK,QAAL;QACES,GAAG,GAAGT,QAAQ,CAACO,KAAD,CAAd;QACA;MACF;QACEE,GAAG,GAAGF,KAAN;;IAEJN,aAAa,CAACK,GAAD,CAAb,GAAqBG,GAArB;GAdF;EAiBA,OAAOR,aAAP;AACD;IAEYS,mBAAmB,GAAG,SAAtBA,mBAAsBA,CAACC,IAAD;EAAA,OAAmB,UAACC,UAAD;IAIpD,IAAAC,cAAA,GAA6BC,aAAa,IAAAC,MAAA,CAAKC,aAAa,CAACJ,UAAD,CAAlB,EAA1C;MAAQf,KAAR,GAAAgB,cAAA,CAAQhB,KAAR;MAAkBoB,MAAlB,GAAAC,6BAAA,CAAAL,cAAA,EAAAM,SAAA;IACA,OAAAC,QAAA,KACKH,MADL;MAEEpB,KAAK,EAAED,YAAY,CAACC,KAAD,EAAQc,IAAR;;GAPY;AAAA;SAWnBU,KAAKd,KAAA;EAOnB,IAAMe,YAAY,GAAG,8CAArB;EAEA,OAAOf,KAAK,CAACgB,OAAN,CAAcD,YAAd,EAA4B,UAACE,KAAD,EAAQC,QAAR;IAEjC,IAAMC,MAAM,GAAGC,MAAM,CAACF,QAAD,CAArB;IACA,IAAIE,MAAM,CAACC,KAAP,CAAaF,MAAb,CAAJ,EAA0B;MACxB,OAAOF,KAAP;;IAEF,OAAUE,MAAV;GANK,CAAP;AAQD"},"metadata":{},"sourceType":"module","externalDependencies":[]}