{"ast":null,"code":"import { isArray } from '@sajari/react-sdk-utils';\nfunction useImageProvider(params) {\n  var provider = params.provider,\n    width = params.width,\n    height = params.height,\n    _params$images = params.images,\n    imagesParam = _params$images === void 0 ? [] : _params$images;\n  var images = isArray(imagesParam) ? imagesParam.filter(Boolean) : [imagesParam];\n  if (!provider) {\n    return images;\n  }\n  switch (provider) {\n    case 'shopify':\n      return images.map(function (i) {\n        var url = new URL(i);\n        var pathname = url.pathname;\n        var _pathname$split$rever = pathname.split('.').reverse(),\n          extension = _pathname$split$rever[0],\n          rest = _pathname$split$rever.slice(1);\n        var pathnameWithoutExtension = rest.join();\n        if (width && height) {\n          url.pathname = pathnameWithoutExtension + \"_\" + width + \"x\" + height;\n        } else if (width) {\n          url.pathname = pathnameWithoutExtension + \"_\" + width + \"x\";\n        } else if (height) {\n          url.pathname = pathnameWithoutExtension + \"_x\" + width;\n        }\n        url.pathname = url.pathname + \".\" + extension;\n        return url.toString();\n      });\n    default:\n      return images;\n  }\n}\nexport default useImageProvider;","map":{"version":3,"names":["useImageProvider","params","provider","width","height","images","imagesParam","_params$images","isArray","filter","Boolean","map","i","url","URL","pathname","_pathname$split$rever","split","reverse","extension","rest","slice","pathnameWithoutExtension","join","toString"],"sources":["C:\\Users\\이세희\\Documents\\project_oyr\\node_modules\\@sajari\\react-components\\src\\Image\\useImageProvider.ts"],"sourcesContent":["import { isArray } from '@sajari/react-sdk-utils';\n\nimport { ImageProvider } from './types';\n\ninterface Params {\n  provider: ImageProvider;\n  images?: string | Array<string | undefined>;\n  width?: number | string;\n  height?: number | string;\n}\n\nexport default function useImageProvider(params: Params) {\n  const { provider, width, height, images: imagesParam = [] } = params;\n  const images = isArray(imagesParam) ? (imagesParam.filter(Boolean) as Array<string>) : [imagesParam];\n  if (!provider) {\n    return images;\n  }\n\n  switch (provider) {\n    case 'shopify':\n      return images.map((i) => {\n        const url = new URL(i);\n        const { pathname } = url;\n        const [extension, ...rest] = pathname.split('.').reverse();\n        const pathnameWithoutExtension = rest.join();\n        if (width && height) {\n          url.pathname = `${pathnameWithoutExtension}_${width}x${height}`;\n        } else if (width) {\n          url.pathname = `${pathnameWithoutExtension}_${width}x`;\n        } else if (height) {\n          url.pathname = `${pathnameWithoutExtension}_x${width}`;\n        }\n        url.pathname = `${url.pathname}.${extension}`;\n        return url.toString();\n      });\n    default:\n      return images;\n  }\n}\n"],"mappings":";SAWwBA,iBAAiBC,MAAA;EACvC,IAAQC,QAAR,GAA8DD,MAA9D,CAAQC,QAAR;IAAkBC,KAAlB,GAA8DF,MAA9D,CAAkBE,KAAlB;IAAyBC,MAAzB,GAA8DH,MAA9D,CAAyBG,MAAzB;qBAA8DH,MAA9D,CAAiCI,MAAjC;IAAyCC,WAAzC,GAAAC,cAAA,cAAuD,EAAvD,GAAAA,cAAA;EACA,IAAMF,MAAM,GAAGG,OAAO,CAACF,WAAD,CAAP,GAAwBA,WAAW,CAACG,MAAZ,CAAmBC,OAAnB,CAAxB,GAAwE,CAACJ,WAAD,CAAvF;EACA,IAAI,CAACJ,QAAL,EAAe;IACb,OAAOG,MAAP;;EAGF,QAAQH,QAAR;IACE,KAAK,SAAL;MACE,OAAOG,MAAM,CAACM,GAAP,CAAW,UAACC,CAAD;QAChB,IAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQF,CAAR,CAAZ;QACA,IAAQG,QAAR,GAAqBF,GAArB,CAAQE,QAAR;QACA,IAAAC,qBAAA,GAA6BD,QAAQ,CAACE,KAAT,CAAe,GAAf,EAAoBC,OAApB,EAA7B;UAAOC,SAAP,GAAAH,qBAAA;UAAqBI,IAArB,GAAAJ,qBAAA,CAAAK,KAAA;QACA,IAAMC,wBAAwB,GAAGF,IAAI,CAACG,IAAL,EAAjC;QACA,IAAIpB,KAAK,IAAIC,MAAb,EAAqB;UACnBS,GAAG,CAACE,QAAJ,GAAkBO,wBAAlB,SAA8CnB,KAA9C,SAAuDC,MAAvD;SADF,MAEO,IAAID,KAAJ,EAAW;UAChBU,GAAG,CAACE,QAAJ,GAAkBO,wBAAlB,SAA8CnB,KAA9C;SADK,MAEA,IAAIC,MAAJ,EAAY;UACjBS,GAAG,CAACE,QAAJ,GAAkBO,wBAAlB,UAA+CnB,KAA/C;;QAEFU,GAAG,CAACE,QAAJ,GAAkBF,GAAG,CAACE,QAAtB,SAAkCI,SAAlC;QACA,OAAON,GAAG,CAACW,QAAJ,EAAP;OAbK,CAAP;IAeF;MACE,OAAOnB,MAAP;;AAEL"},"metadata":{},"sourceType":"module","externalDependencies":[]}