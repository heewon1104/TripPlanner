{"ast":null,"code":"import { extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { createElement } from 'react';\nimport { merge } from '../object.esm.js';\nimport { CacheProvider } from '@emotion/core';\nimport { useTheme as useTheme$1, ThemeProvider as ThemeProvider$1 } from 'emotion-theming';\nimport cache from './cache.esm.js';\nvar defaultTheme = {\n  color: {\n    primary: {\n      base: /*#__PURE__*/\"#6366f1\".toString(),\n      text: /*#__PURE__*/\"#fff\".toString(),\n      active: /*#__PURE__*/\"#4f46e5\".toString()\n    }\n  }\n};\nvar useTheme = function useTheme() {\n  var theme = useTheme$1();\n  return merge(_extends({}, defaultTheme), theme);\n};\nvar ThemeProvider = function ThemeProvider(_ref) {\n  var _ref$theme = _ref.theme,\n    theme = _ref$theme === void 0 ? defaultTheme : _ref$theme,\n    _ref$importantStyles = _ref.importantStyles,\n    importantStyles = _ref$importantStyles === void 0 ? false : _ref$importantStyles,\n    children = _ref.children;\n  return createElement(ThemeProvider$1, {\n    theme: merge(_extends({}, defaultTheme), theme)\n  }, importantStyles ? createElement(CacheProvider, {\n    value: cache\n  }, children) : children);\n};\nexport default ThemeProvider;\nexport { useTheme };","map":{"version":3,"names":["defaultTheme","color","primary","base","toString","text","active","useTheme","theme","useTheme$1","merge","_extends","ThemeProvider","_ref","_ref$theme","importantStyles","_ref$importantStyles","children","createElement","ThemeProvider$1","CacheProvider","value","cache"],"sources":["C:\\Users\\이세희\\Documents\\project_oyr\\node_modules\\@sajari\\react-sdk-utils\\src\\styles\\theming.tsx"],"sourcesContent":["import { CacheProvider } from '@emotion/core';\nimport { ThemeProvider as EmotionThemeProvider, useTheme as useEmotionTheme } from 'emotion-theming';\nimport * as React from 'react';\nimport { theme as twTheme } from 'twin.macro';\n\nimport { merge } from '../object';\nimport cache from './cache';\n\ntype DeepPartial<T> = {\n  [P in keyof T]?: DeepPartial<T[P]>;\n};\n\nexport interface Theme {\n  color: {\n    primary: {\n      base: string;\n      text: string;\n      active: string;\n    };\n  };\n}\n\nconst defaultTheme: Theme = {\n  color: {\n    primary: {\n      base: twTheme`colors.indigo.500`.toString(),\n      text: twTheme`colors.white`.toString(),\n      active: twTheme`colors.indigo.600`.toString(),\n    },\n  },\n};\n\nexport const useTheme = () => {\n  const theme = useEmotionTheme<Theme>();\n  return merge({ ...defaultTheme }, theme) as Theme;\n};\n\nexport interface ThemeProviderProps {\n  importantStyles?: boolean;\n  theme?: DeepPartial<Theme>;\n}\n\nconst ThemeProvider: React.FC<ThemeProviderProps> = ({ theme = defaultTheme, importantStyles = false, children }) => (\n  <EmotionThemeProvider theme={merge({ ...defaultTheme }, theme)}>\n    {importantStyles ? <CacheProvider value={cache}>{children}</CacheProvider> : children}\n  </EmotionThemeProvider>\n);\n\nexport default ThemeProvider;\n"],"mappings":";;;;;;AAsBA,IAAMA,YAAY,GAAU;EAC1BC,KAAK,EAAE;IACLC,OAAO,EAAE;MACPC,IAAI,eAAE,UAA2BC,QAA3B,EADC;MAEPC,IAAI,eAAE,OAAsBD,QAAtB,EAFC;MAGPE,MAAM,eAAE,UAA2BF,QAA3B;;;AALc,CAA5B;IAUaG,QAAQ,GAAG,SAAXA,QAAWA,CAAA;EACtB,IAAMC,KAAK,GAAGC,UAAe,EAA7B;EACA,OAAOC,KAAK,CAAAC,QAAA,KAAMX,YAAN,GAAsBQ,KAAtB,CAAZ;AACD;AAOD,IAAMI,aAAa,GAAiC,SAA9CA,aAA8CA,CAAAC,IAAA;EAAA,IAAAC,UAAA,GAAAD,IAAA,CAAGL,KAAH;IAAGA,KAAH,GAAAM,UAAA,cAAWd,YAAX,GAAAc,UAAA;gCAAyBC,eAAzB;IAAyBA,eAAzB,GAAAC,oBAAA,cAA2C,KAA3C,GAAAA,oBAAA;IAAkDC,QAAlD,GAAAJ,IAAA,CAAkDI,QAAlD;EAAA,OAClDC,aAAA,CAACC,eAAD;IAAsBX,KAAK,EAAEE,KAAK,CAAAC,QAAA,KAAMX,YAAN,GAAsBQ,KAAtB;GAAlC,EACGO,eAAe,GAAGG,aAAA,CAACE,aAAD;IAAeC,KAAK,EAAEC;GAAtB,EAA8BL,QAA9B,CAAH,GAA6DA,QAD/E,CADkD;AAAA,CAApD"},"metadata":{},"sourceType":"module","externalDependencies":[]}