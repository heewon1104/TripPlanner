{"ast":null,"code":"import { isString } from './assertion.esm.js';\nimport { isSSR } from './ssr.esm.js';\nfunction replaceAll(target, search, replacement) {\n  if (isString(search)) {\n    return target.split(search).join(replacement);\n  }\n  return Object.entries(search).reduce(function (current, _ref) {\n    var find = _ref[0],\n      replace = _ref[1];\n    return replaceAll(current, find, replace);\n  }, target);\n}\nfunction decodeHTML(input) {\n  if (input === void 0) {\n    input = '';\n  }\n  if (isSSR()) {\n    return input;\n  }\n  var txt = document.createElement('textarea');\n  txt.innerHTML = input;\n  return txt.value;\n}\nfunction escapeHTML(input) {\n  if (input === void 0) {\n    input = '';\n  }\n  return input.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#039;');\n}\nfunction pluralize(input, singular, plural) {\n  if (input === 1) {\n    return singular;\n  }\n  return plural;\n}\nexport { decodeHTML, escapeHTML, pluralize, replaceAll };","map":{"version":3,"names":["replaceAll","target","search","replacement","isString","split","join","Object","entries","reduce","current","_ref","find","replace","decodeHTML","input","isSSR","txt","document","createElement","innerHTML","value","escapeHTML","pluralize","singular","plural"],"sources":["C:\\Users\\이세희\\Documents\\project_oyr\\node_modules\\@sajari\\react-sdk-utils\\src\\string.ts"],"sourcesContent":["import { isString } from './assertion';\nimport { isSSR } from './ssr';\n\nexport function replaceAll(target: string, search: string | Record<string, string>, replacement?: string): string {\n  if (isString(search)) {\n    return target.split(search).join(replacement);\n  }\n\n  return Object.entries(search).reduce((current, [find, replace]) => replaceAll(current, find, replace), target);\n}\n\n/** Decode any HTML entities in a string */\nexport function decodeHTML(input = ''): string {\n  if (isSSR()) {\n    return input;\n  }\n\n  const txt = document.createElement('textarea');\n  txt.innerHTML = input;\n  return txt.value;\n}\n\nexport function escapeHTML(input = ''): string {\n  return input\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\nexport function pluralize(input: number, singular: string, plural: string): string {\n  if (input === 1) {\n    return singular;\n  }\n\n  return plural;\n}\n"],"mappings":";;SAGgBA,WAAWC,MAAA,EAAgBC,MAAA,EAAyCC,WAAA;EAClF,IAAIC,QAAQ,CAACF,MAAD,CAAZ,EAAsB;IACpB,OAAOD,MAAM,CAACI,KAAP,CAAaH,MAAb,EAAqBI,IAArB,CAA0BH,WAA1B,CAAP;;EAGF,OAAOI,MAAM,CAACC,OAAP,CAAeN,MAAf,EAAuBO,MAAvB,CAA8B,UAACC,OAAD,EAAAC,IAAA;IAAA,IAAWC,IAAX,GAAAD,IAAA;MAAiBE,OAAjB,GAAAF,IAAA;IAAA,OAA8BX,UAAU,CAACU,OAAD,EAAUE,IAAV,EAAgBC,OAAhB,CAAxC;GAA9B,EAAgGZ,MAAhG,CAAP;AACD;SAGea,WAAWC,KAAA;MAAAA,KAAA;IAAAA,KAAA,GAAQ;;EACjC,IAAIC,KAAK,EAAT,EAAa;IACX,OAAOD,KAAP;;EAGF,IAAME,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAZ;EACAF,GAAG,CAACG,SAAJ,GAAgBL,KAAhB;EACA,OAAOE,GAAG,CAACI,KAAX;AACD;SAEeC,WAAWP,KAAA;MAAAA,KAAA;IAAAA,KAAA,GAAQ;;EACjC,OAAOA,KAAK,CACTF,OADI,CACI,IADJ,EACU,OADV,EAEJA,OAFI,CAEI,IAFJ,EAEU,MAFV,EAGJA,OAHI,CAGI,IAHJ,EAGU,MAHV,EAIJA,OAJI,CAII,IAJJ,EAIU,QAJV,EAKJA,OALI,CAKI,IALJ,EAKU,QALV,CAAP;AAMD;SAEeU,UAAUR,KAAA,EAAeS,QAAA,EAAkBC,MAAA;EACzD,IAAIV,KAAK,KAAK,CAAd,EAAiB;IACf,OAAOS,QAAP;;EAGF,OAAOC,MAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}