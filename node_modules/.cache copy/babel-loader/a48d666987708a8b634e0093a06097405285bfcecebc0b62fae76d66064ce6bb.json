{"ast":null,"code":"'use strict';\n\nvar ResizeObserver = require('resize-observer-polyfill');\nvar react = require('react');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar ResizeObserver__default = /*#__PURE__*/_interopDefaultLegacy(ResizeObserver);\n\n// This of course could've been more streamlined with internal state instead of\n// refs, but then host hooks / components could not opt out of renders.\n// This could've been exported to its own module, but the current build doesn't\n// seem to work with module imports and I had no more time to spend on this...\nfunction useResolvedElement(subscriber, refOrElement) {\n  var callbackRefElement = react.useRef(null);\n  var refCallback = react.useCallback(function (element) {\n    callbackRefElement.current = element;\n    callSubscriber();\n  }, []);\n  var lastReportedElementRef = react.useRef(null);\n  var cleanupRef = react.useRef();\n  var callSubscriber = function callSubscriber() {\n    var element = null;\n    if (callbackRefElement.current) {\n      element = callbackRefElement.current;\n    } else if (refOrElement) {\n      if (refOrElement instanceof HTMLElement) {\n        element = refOrElement;\n      } else {\n        element = refOrElement.current;\n      }\n    }\n    if (lastReportedElementRef.current === element) {\n      return;\n    }\n    if (cleanupRef.current) {\n      cleanupRef.current(); // Making sure the cleanup is not called accidentally multiple times.\n\n      cleanupRef.current = null;\n    }\n    lastReportedElementRef.current = element; // Only calling the subscriber, if there's an actual element to report.\n\n    if (element) {\n      cleanupRef.current = subscriber(element);\n    }\n  }; // On each render, we check whether a ref changed, or if we got a new raw\n  // element.\n\n  react.useEffect(function () {\n    // Note that this does not mean that \"element\" will necessarily be whatever\n    // the ref currently holds. It'll simply \"update\" `element` each render to\n    // the current ref value, but there's no guarantee that the ref value will\n    // not change later without a render.\n    // This may or may not be a problem depending on the specific use case.\n    callSubscriber();\n  }, [refOrElement]);\n  return refCallback;\n}\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n  var onResize = opts.onResize;\n  var onResizeRef = react.useRef(undefined);\n  onResizeRef.current = onResize; // Using a single instance throughout the hook's lifetime\n\n  var resizeObserverRef = react.useRef();\n  var _useState = react.useState({\n      width: undefined,\n      height: undefined\n    }),\n    size = _useState[0],\n    setSize = _useState[1]; // In certain edge cases the RO might want to report a size change just after\n  // the component unmounted.\n\n  var didUnmount = react.useRef(false);\n  react.useEffect(function () {\n    return function () {\n      didUnmount.current = true;\n    };\n  }, []); // Using a ref to track the previous width / height to avoid unnecessary renders\n\n  var previous = react.useRef({\n    width: undefined,\n    height: undefined\n  }); // This block is kinda like a useEffect, only it's called whenever a new\n  // element could be resolved based on the ref option. It also has a cleanup\n  // function.\n\n  var refCallback = useResolvedElement(function (element) {\n    // Initialising the RO instance\n    if (!resizeObserverRef.current) {\n      // Saving a single instance, used by the hook from this point on.\n      resizeObserverRef.current = new ResizeObserver__default['default'](function (entries) {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n        var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n        var newWidth = Math.round(entry.contentRect.width);\n        var newHeight = Math.round(entry.contentRect.height);\n        if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n          var newSize = {\n            width: newWidth,\n            height: newHeight\n          };\n          if (onResizeRef.current) {\n            onResizeRef.current(newSize);\n          } else {\n            previous.current.width = newWidth;\n            previous.current.height = newHeight;\n            if (!didUnmount.current) {\n              setSize(newSize);\n            }\n          }\n        }\n      });\n    }\n    resizeObserverRef.current.observe(element);\n    return function () {\n      if (resizeObserverRef.current) {\n        resizeObserverRef.current.unobserve(element);\n      }\n    };\n  }, opts.ref);\n  return react.useMemo(function () {\n    return {\n      ref: refCallback,\n      width: size.width,\n      height: size.height\n    };\n  }, [refCallback, size ? size.width : null, size ? size.height : null]);\n}\nmodule.exports = useResizeObserver;","map":{"version":3,"names":["ResizeObserver","require","react","_interopDefaultLegacy","e","ResizeObserver__default","useResolvedElement","subscriber","refOrElement","callbackRefElement","useRef","refCallback","useCallback","element","current","callSubscriber","lastReportedElementRef","cleanupRef","HTMLElement","useEffect","useResizeObserver","opts","onResize","onResizeRef","undefined","resizeObserverRef","_useState","useState","width","height","size","setSize","didUnmount","previous","entries","Array","isArray","entry","newWidth","Math","round","contentRect","newHeight","newSize","observe","unobserve","ref","useMemo","module","exports"],"sources":["C:/Users/이세희/Documents/project_oyr/node_modules/use-resize-observer/polyfilled.js"],"sourcesContent":["'use strict';\n\nvar ResizeObserver = require('resize-observer-polyfill');\nvar react = require('react');\n\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\nvar ResizeObserver__default = /*#__PURE__*/_interopDefaultLegacy(ResizeObserver);\n\n// This of course could've been more streamlined with internal state instead of\n// refs, but then host hooks / components could not opt out of renders.\n// This could've been exported to its own module, but the current build doesn't\n// seem to work with module imports and I had no more time to spend on this...\nfunction useResolvedElement(subscriber, refOrElement) {\n  var callbackRefElement = react.useRef(null);\n  var refCallback = react.useCallback(function (element) {\n    callbackRefElement.current = element;\n    callSubscriber();\n  }, []);\n  var lastReportedElementRef = react.useRef(null);\n  var cleanupRef = react.useRef();\n\n  var callSubscriber = function callSubscriber() {\n    var element = null;\n\n    if (callbackRefElement.current) {\n      element = callbackRefElement.current;\n    } else if (refOrElement) {\n      if (refOrElement instanceof HTMLElement) {\n        element = refOrElement;\n      } else {\n        element = refOrElement.current;\n      }\n    }\n\n    if (lastReportedElementRef.current === element) {\n      return;\n    }\n\n    if (cleanupRef.current) {\n      cleanupRef.current(); // Making sure the cleanup is not called accidentally multiple times.\n\n      cleanupRef.current = null;\n    }\n\n    lastReportedElementRef.current = element; // Only calling the subscriber, if there's an actual element to report.\n\n    if (element) {\n      cleanupRef.current = subscriber(element);\n    }\n  }; // On each render, we check whether a ref changed, or if we got a new raw\n  // element.\n\n\n  react.useEffect(function () {\n    // Note that this does not mean that \"element\" will necessarily be whatever\n    // the ref currently holds. It'll simply \"update\" `element` each render to\n    // the current ref value, but there's no guarantee that the ref value will\n    // not change later without a render.\n    // This may or may not be a problem depending on the specific use case.\n    callSubscriber();\n  }, [refOrElement]);\n  return refCallback;\n}\n\nfunction useResizeObserver(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n\n  // Saving the callback as a ref. With this, I don't need to put onResize in the\n  // effect dep array, and just passing in an anonymous function without memoising\n  // will not reinstantiate the hook's ResizeObserver\n  var onResize = opts.onResize;\n  var onResizeRef = react.useRef(undefined);\n  onResizeRef.current = onResize; // Using a single instance throughout the hook's lifetime\n\n  var resizeObserverRef = react.useRef();\n\n  var _useState = react.useState({\n    width: undefined,\n    height: undefined\n  }),\n      size = _useState[0],\n      setSize = _useState[1]; // In certain edge cases the RO might want to report a size change just after\n  // the component unmounted.\n\n\n  var didUnmount = react.useRef(false);\n  react.useEffect(function () {\n    return function () {\n      didUnmount.current = true;\n    };\n  }, []); // Using a ref to track the previous width / height to avoid unnecessary renders\n\n  var previous = react.useRef({\n    width: undefined,\n    height: undefined\n  }); // This block is kinda like a useEffect, only it's called whenever a new\n  // element could be resolved based on the ref option. It also has a cleanup\n  // function.\n\n  var refCallback = useResolvedElement(function (element) {\n    // Initialising the RO instance\n    if (!resizeObserverRef.current) {\n      // Saving a single instance, used by the hook from this point on.\n      resizeObserverRef.current = new ResizeObserver__default['default'](function (entries) {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        var entry = entries[0]; // `Math.round` is in line with how CSS resolves sub-pixel values\n\n        var newWidth = Math.round(entry.contentRect.width);\n        var newHeight = Math.round(entry.contentRect.height);\n\n        if (previous.current.width !== newWidth || previous.current.height !== newHeight) {\n          var newSize = {\n            width: newWidth,\n            height: newHeight\n          };\n\n          if (onResizeRef.current) {\n            onResizeRef.current(newSize);\n          } else {\n            previous.current.width = newWidth;\n            previous.current.height = newHeight;\n\n            if (!didUnmount.current) {\n              setSize(newSize);\n            }\n          }\n        }\n      });\n    }\n\n    resizeObserverRef.current.observe(element);\n    return function () {\n      if (resizeObserverRef.current) {\n        resizeObserverRef.current.unobserve(element);\n      }\n    };\n  }, opts.ref);\n  return react.useMemo(function () {\n    return {\n      ref: refCallback,\n      width: size.width,\n      height: size.height\n    };\n  }, [refCallback, size ? size.width : null, size ? size.height : null]);\n}\n\nmodule.exports = useResizeObserver;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}