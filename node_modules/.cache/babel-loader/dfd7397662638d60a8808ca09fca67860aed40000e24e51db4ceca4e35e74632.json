{"ast":null,"code":"const [coords, saveCoords] = useState();\nconst [temp, setTemp] = useState();\nconst [weather, setWeather] = useState();\nfunction handleGeoSucc(position) {\n  console.log(position);\n  const latitude = position.coords.latitude; // 경도  \n  const longitude = position.coords.longitude; // 위도\n  const coordsObj = {\n    latitude,\n    longitude\n  };\n  saveCoords(coordsObj);\n  getWeather(latitude, longitude);\n}\nfunction handleGeoErr(err) {\n  console.log(\"geo err! \" + err);\n}\nfunction requestCoords() {\n  navigator.geolocation.getCurrentPosition(handleGeoSucc, handleGeoErr);\n}\nfunction getWeather(lat, lon) {\n  fetch(`https://api.openweathermap.org/data/3.0/weather?lat=${lat}&lon=${lon}&appid=${'ad14089cb0bfefe6bd1b977b00f4f4b0'}&units=metric`).then(res => res.json()).then(data => {\n    console.log(data);\n    const temp = data.main.temp;\n    const weathers = data.weather[data.weather.length - 1];\n    setTemp(temp);\n    setWeather(weathers.main);\n  });\n}\nuseEffect(() => {\n  requestCoords();\n}, []);","map":{"version":3,"names":["coords","saveCoords","useState","temp","setTemp","weather","setWeather","handleGeoSucc","position","console","log","latitude","longitude","coordsObj","getWeather","handleGeoErr","err","requestCoords","navigator","geolocation","getCurrentPosition","lat","lon","fetch","then","res","json","data","main","weathers","length","useEffect"],"sources":["/Users/mac/Desktop/reactstudy/reactstudy/src/components/apitest.js"],"sourcesContent":["const [coords, saveCoords] = useState();\nconst [temp, setTemp] = useState();\nconst [weather, setWeather] = useState();\n\nfunction handleGeoSucc(position) {\nconsole.log(position);\nconst latitude = position.coords.latitude;  // 경도  \nconst longitude = position.coords.longitude;  // 위도\nconst coordsObj = {\n    latitude,\n    longitude\n}\nsaveCoords(coordsObj);\ngetWeather(latitude, longitude);\n}\n\nfunction handleGeoErr(err) {\nconsole.log(\"geo err! \" + err);\n}\n\nfunction requestCoords() {\nnavigator.geolocation.getCurrentPosition(handleGeoSucc, handleGeoErr);\n}\n\nfunction getWeather(lat, lon) {\nfetch(`https://api.openweathermap.org/data/3.0/weather?lat=${lat}&lon=${lon}&appid=${'ad14089cb0bfefe6bd1b977b00f4f4b0'}&units=metric`)\n    .then(res => res.json())\n    .then(data => {\n    console.log(data);\n    const temp = data.main.temp;\n    const weathers = data.weather[data.weather.length - 1];\n    setTemp(temp);\n    setWeather(weathers.main);\n    })\n}\n\nuseEffect(() => {\nrequestCoords();\n}, []);"],"mappings":"AAAA,MAAM,CAACA,MAAM,EAAEC,UAAU,CAAC,GAAGC,QAAQ,CAAC,CAAC;AACvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGF,QAAQ,CAAC,CAAC;AAClC,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,CAAC;AAExC,SAASK,aAAaA,CAACC,QAAQ,EAAE;EACjCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACrB,MAAMG,QAAQ,GAAGH,QAAQ,CAACR,MAAM,CAACW,QAAQ,CAAC,CAAE;EAC5C,MAAMC,SAAS,GAAGJ,QAAQ,CAACR,MAAM,CAACY,SAAS,CAAC,CAAE;EAC9C,MAAMC,SAAS,GAAG;IACdF,QAAQ;IACRC;EACJ,CAAC;EACDX,UAAU,CAACY,SAAS,CAAC;EACrBC,UAAU,CAACH,QAAQ,EAAEC,SAAS,CAAC;AAC/B;AAEA,SAASG,YAAYA,CAACC,GAAG,EAAE;EAC3BP,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGM,GAAG,CAAC;AAC9B;AAEA,SAASC,aAAaA,CAAA,EAAG;EACzBC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACb,aAAa,EAAEQ,YAAY,CAAC;AACrE;AAEA,SAASD,UAAUA,CAACO,GAAG,EAAEC,GAAG,EAAE;EAC9BC,KAAK,CAAE,uDAAsDF,GAAI,QAAOC,GAAI,UAAS,kCAAmC,eAAc,CAAC,CAClIE,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;IACdlB,OAAO,CAACC,GAAG,CAACiB,IAAI,CAAC;IACjB,MAAMxB,IAAI,GAAGwB,IAAI,CAACC,IAAI,CAACzB,IAAI;IAC3B,MAAM0B,QAAQ,GAAGF,IAAI,CAACtB,OAAO,CAACsB,IAAI,CAACtB,OAAO,CAACyB,MAAM,GAAG,CAAC,CAAC;IACtD1B,OAAO,CAACD,IAAI,CAAC;IACbG,UAAU,CAACuB,QAAQ,CAACD,IAAI,CAAC;EACzB,CAAC,CAAC;AACN;AAEAG,SAAS,CAAC,MAAM;EAChBd,aAAa,CAAC,CAAC;AACf,CAAC,EAAE,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}