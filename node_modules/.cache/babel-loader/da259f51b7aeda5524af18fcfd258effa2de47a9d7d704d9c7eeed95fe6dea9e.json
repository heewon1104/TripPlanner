{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/reactstudy/reactstudy/src/components/Googlemap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, DirectionsService, DirectionsRenderer } from '@react-google-maps/api';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Googlemap = () => {\n  _s();\n  const [directions, setDirections] = useState(null);\n  const [origin, setOrigin] = useState(null);\n  const [destination, setDestination] = useState(null);\n  const [waypoints, setWaypoints] = useState(null);\n  const [center, setCenter] = useState(null); // 중간 좌표를 저장할 상태\n\n  useEffect(() => {\n    const url = `/maps/api/directions/json?origin=Boston%2C%20MA&destination=Concord%2C%20MA&waypoints=via%3ACharlestown%2CMA%7Cvia%3ALexington%2CMA&departure_time=now&key=AIzaSyAyZffxPv5S2NP2NEp_31-HH9XmDwSEWbM`;\n    axios.get(url).then(response => {\n      const result = response.data;\n      if (result.routes.length > 0) {\n        const route = result.routes[0];\n        setDirections(route);\n        setOrigin(route.legs[0].start_location);\n        setDestination(route.legs[0].end_location);\n        setWaypoints(route.waypoint_order.map(index => route.legs[index].end_location));\n        const lat = (route.legs[0].start_location.lat + route.legs[0].end_location.lat) / 2;\n        const lng = (route.legs[0].start_location.lng + route.legs[0].end_location.lng) / 2;\n        setCenter({\n          lat,\n          lng\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  const apiKey = 'AIzaSyAyZffxPv5S2NP2NEp_31-HH9XmDwSEWbM'; // 여기에 자신의 Google Maps API 키를 입력하세요\n\n  const mapStyles = {\n    height: '400px',\n    width: '100%'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: apiKey,\n      children: center &&\n      /*#__PURE__*/\n      // center가 null이 아닐 때만 지도를 렌더링하도록 수정\n      _jsxDEV(GoogleMap, {\n        mapContainerStyle: mapStyles,\n        zoom: 13,\n        center: center,\n        children: directions && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n            directions: directions,\n            options: {\n              polylineOptions: {\n                strokeColor: '#FF0000',\n                strokeWeight: 4\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(DirectionsService, {\n            options: {\n              origin,\n              destination,\n              waypoints,\n              travelMode: 'DRIVING'\n            },\n            callback: result => {\n              if (result !== null) {\n                setDirections(result);\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Googlemap, \"aHvQ5xDncJT6bTe2vQ+6G8ivWrM=\");\n_c = Googlemap;\nexport default Googlemap;\nvar _c;\n$RefreshReg$(_c, \"Googlemap\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMap","LoadScript","DirectionsService","DirectionsRenderer","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Googlemap","_s","directions","setDirections","origin","setOrigin","destination","setDestination","waypoints","setWaypoints","center","setCenter","url","get","then","response","result","data","routes","length","route","legs","start_location","end_location","waypoint_order","map","index","lat","lng","catch","error","console","log","apiKey","mapStyles","height","width","children","googleMapsApiKey","mapContainerStyle","zoom","options","polylineOptions","strokeColor","strokeWeight","fileName","_jsxFileName","lineNumber","columnNumber","travelMode","callback","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/reactstudy/reactstudy/src/components/Googlemap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GoogleMap, LoadScript, DirectionsService, DirectionsRenderer } from '@react-google-maps/api';\nimport axios from 'axios';\n\nconst Googlemap = () => {\n  const [directions, setDirections] = useState(null);\n  const [origin, setOrigin] = useState(null);\n  const [destination, setDestination] = useState(null);\n  const [waypoints, setWaypoints] = useState(null);\n  const [center, setCenter] = useState(null); // 중간 좌표를 저장할 상태\n\n  useEffect(() => {\n    const url = `/maps/api/directions/json?origin=Boston%2C%20MA&destination=Concord%2C%20MA&waypoints=via%3ACharlestown%2CMA%7Cvia%3ALexington%2CMA&departure_time=now&key=AIzaSyAyZffxPv5S2NP2NEp_31-HH9XmDwSEWbM`;\n\n    axios\n      .get(url)\n      .then((response) => {\n        const result = response.data;\n        if (result.routes.length > 0) {\n          const route = result.routes[0];\n          setDirections(route);\n          setOrigin(route.legs[0].start_location);\n          setDestination(route.legs[0].end_location);\n          setWaypoints(route.waypoint_order.map(index => route.legs[index].end_location));\n\n          const lat = (route.legs[0].start_location.lat + route.legs[0].end_location.lat) / 2;\n          const lng = (route.legs[0].start_location.lng + route.legs[0].end_location.lng) / 2;\n          setCenter({ lat, lng });\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  const apiKey = 'AIzaSyAyZffxPv5S2NP2NEp_31-HH9XmDwSEWbM'; // 여기에 자신의 Google Maps API 키를 입력하세요\n\n  const mapStyles = {\n    height: '400px',\n    width: '100%',\n  };\n\n  return (\n    <div>\n      <LoadScript googleMapsApiKey={apiKey}>\n        {center && ( // center가 null이 아닐 때만 지도를 렌더링하도록 수정\n          <GoogleMap mapContainerStyle={mapStyles} zoom={13} center={center}>\n            {directions && (\n              <>\n                <DirectionsRenderer\n                  directions={directions}\n                  options={{ polylineOptions: { strokeColor: '#FF0000', strokeWeight: 4 } }}\n                />\n                <DirectionsService\n                  options={{\n                    origin,\n                    destination,\n                    waypoints,\n                    travelMode: 'DRIVING',\n                  }}\n                  callback={(result) => {\n                    if (result !== null) {\n                      setDirections(result);\n                    }\n                  }}\n                />\n              </>\n            )}\n          </GoogleMap>\n        )}\n      </LoadScript>\n    </div>\n  );\n};\n\nexport default Googlemap;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}