{"ast":null,"code":"import { useState } from 'react';\nconst [coords, saveCoords] = useState();\nconst [temp, setTemp] = useState();\nconst [weather, setWeather] = useState();\nfunction handleGeoSucc(position) {\n  console.log(position);\n  const latitude = position.coords.latitude; // 경도  \n  const longitude = position.coords.longitude; // 위도\n  const coordsObj = {\n    latitude,\n    longitude\n  };\n  saveCoords(coordsObj);\n  getWeather(latitude, longitude);\n}\nfunction handleGeoErr(err) {\n  console.log(\"geo err! \" + err);\n}\nfunction requestCoords() {\n  navigator.geolocation.getCurrentPosition(handleGeoSucc, handleGeoErr);\n}\nfunction getWeather(lat, lon) {\n  fetch(`https://api.openweathermap.org/data/3.0/weather?lat=${lat}&lon=${lon}&appid=${'ad14089cb0bfefe6bd1b977b00f4f4b0'}&units=metric`).then(res => res.json()).then(data => {\n    console.log(data);\n    const temp = data.main.temp;\n    const weathers = data.weather[data.weather.length - 1];\n    setTemp(temp);\n    setWeather(weathers.main);\n  });\n}\nuseEffect(() => {\n  requestCoords();\n}, []);","map":{"version":3,"names":["useState","coords","saveCoords","temp","setTemp","weather","setWeather","handleGeoSucc","position","console","log","latitude","longitude","coordsObj","getWeather","handleGeoErr","err","requestCoords","navigator","geolocation","getCurrentPosition","lat","lon","fetch","then","res","json","data","main","weathers","length","useEffect"],"sources":["/Users/mac/Desktop/reactstudy/reactstudy/src/components/apitest.js"],"sourcesContent":["import { useState } from 'react';\n\nconst [coords, saveCoords] = useState();\nconst [temp, setTemp] = useState();\nconst [weather, setWeather] = useState();\n    \n   function handleGeoSucc(position) {\n    console.log(position);\n    const latitude = position.coords.latitude;  // 경도  \n    const longitude = position.coords.longitude;  // 위도\n    const coordsObj = {\n      latitude,\n      longitude\n    }\n    saveCoords(coordsObj);\n    getWeather(latitude, longitude);\n  }\n\n  function handleGeoErr(err) {\n    console.log(\"geo err! \" + err);\n  }\n\n  function requestCoords() {\n    navigator.geolocation.getCurrentPosition(handleGeoSucc, handleGeoErr);\n  }\n\n  function getWeather(lat, lon) {\n    fetch(`https://api.openweathermap.org/data/3.0/weather?lat=${lat}&lon=${lon}&appid=${'ad14089cb0bfefe6bd1b977b00f4f4b0'}&units=metric`)\n      .then(res => res.json())\n      .then(data => {\n        console.log(data);\n        const temp = data.main.temp;\n        const weathers = data.weather[data.weather.length - 1];\n        setTemp(temp);\n        setWeather(weathers.main);\n      })\n  }\n\n  useEffect(() => {\n    requestCoords();\n  }, []);"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAM,CAACC,MAAM,EAAEC,UAAU,CAAC,GAAGF,QAAQ,CAAC,CAAC;AACvC,MAAM,CAACG,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,CAAC;AAClC,MAAM,CAACK,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,CAAC;AAErC,SAASO,aAAaA,CAACC,QAAQ,EAAE;EAChCC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;EACrB,MAAMG,QAAQ,GAAGH,QAAQ,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAE;EAC5C,MAAMC,SAAS,GAAGJ,QAAQ,CAACP,MAAM,CAACW,SAAS,CAAC,CAAE;EAC9C,MAAMC,SAAS,GAAG;IAChBF,QAAQ;IACRC;EACF,CAAC;EACDV,UAAU,CAACW,SAAS,CAAC;EACrBC,UAAU,CAACH,QAAQ,EAAEC,SAAS,CAAC;AACjC;AAEA,SAASG,YAAYA,CAACC,GAAG,EAAE;EACzBP,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGM,GAAG,CAAC;AAChC;AAEA,SAASC,aAAaA,CAAA,EAAG;EACvBC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACb,aAAa,EAAEQ,YAAY,CAAC;AACvE;AAEA,SAASD,UAAUA,CAACO,GAAG,EAAEC,GAAG,EAAE;EAC5BC,KAAK,CAAE,uDAAsDF,GAAI,QAAOC,GAAI,UAAS,kCAAmC,eAAc,CAAC,CACpIE,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;IACZlB,OAAO,CAACC,GAAG,CAACiB,IAAI,CAAC;IACjB,MAAMxB,IAAI,GAAGwB,IAAI,CAACC,IAAI,CAACzB,IAAI;IAC3B,MAAM0B,QAAQ,GAAGF,IAAI,CAACtB,OAAO,CAACsB,IAAI,CAACtB,OAAO,CAACyB,MAAM,GAAG,CAAC,CAAC;IACtD1B,OAAO,CAACD,IAAI,CAAC;IACbG,UAAU,CAACuB,QAAQ,CAACD,IAAI,CAAC;EAC3B,CAAC,CAAC;AACN;AAEAG,SAAS,CAAC,MAAM;EACdd,aAAa,CAAC,CAAC;AACjB,CAAC,EAAE,EAAE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}