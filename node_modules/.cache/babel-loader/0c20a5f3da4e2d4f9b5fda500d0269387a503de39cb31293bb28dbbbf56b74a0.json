{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nfunction Weatherapi() {\n  _s();\n  const [coords, saveCoords] = useState();\n  const [temp, setTemp] = useState();\n  const [weather, setWeather] = useState();\n  function handleGeoSucc(position) {\n    console.log(position);\n    const latitude = position.coords.latitude; // 경도  \n    const longitude = position.coords.longitude; // 위도\n    const coordsObj = {\n      latitude,\n      longitude\n    };\n    saveCoords(coordsObj);\n    getWeather(latitude, longitude);\n  }\n  function handleGeoErr(err) {\n    console.log(\"geo err! \" + err);\n  }\n  function requestCoords() {\n    navigator.geolocation.getCurrentPosition(handleGeoSucc, handleGeoErr);\n  }\n  function getWeather(lat, lon) {\n    fetch(`https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=${current}&appid=${ad14089cb0bfefe6bd1b977b00f4f4b0}&units=metric`).then(res => res.json()).then(data => {\n      console.log(data);\n      if (data && data.main && data.main.temp && data.weather && data.weather.length > 0) {\n        const temp = data.main.temp;\n        const weathers = data.weather[data.weather.length - 1];\n        setTemp(temp);\n        setWeather(weathers.main);\n      } else {\n        console.log('Weather data is incomplete.');\n      }\n    }).catch(error => {\n      console.log('Error fetching weather data:', error);\n    });\n  }\n  useEffect(() => {\n    requestCoords();\n  }, []);\n}\n_s(Weatherapi, \"ZWCtNlDEhxdE0+WxjGuSDgYpGsE=\");\n_c = Weatherapi;\nexport default Weatherapi;\nvar _c;\n$RefreshReg$(_c, \"Weatherapi\");","map":{"version":3,"names":["React","useState","useEffect","Weatherapi","_s","coords","saveCoords","temp","setTemp","weather","setWeather","handleGeoSucc","position","console","log","latitude","longitude","coordsObj","getWeather","handleGeoErr","err","requestCoords","navigator","geolocation","getCurrentPosition","lat","lon","fetch","current","ad14089cb0bfefe6bd1b977b00f4f4b0","then","res","json","data","main","length","weathers","catch","error","_c","$RefreshReg$"],"sources":["/Users/mac/Desktop/reactstudy/reactstudy/src/components/apitest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nfunction Weatherapi(){\n    const [coords, saveCoords] = useState();\n    const [temp, setTemp] = useState();\n    const [weather, setWeather] = useState();\n        \n    function handleGeoSucc(position) {\n        console.log(position);\n        const latitude = position.coords.latitude;  // 경도  \n        const longitude = position.coords.longitude;  // 위도\n        const coordsObj = {\n        latitude,\n        longitude\n        }\n        saveCoords(coordsObj);\n        getWeather(latitude, longitude);\n    }\n\n    function handleGeoErr(err) {\n        console.log(\"geo err! \" + err);\n    }\n\n    function requestCoords() {\n        navigator.geolocation.getCurrentPosition(handleGeoSucc, handleGeoErr);\n    }\n\n    function getWeather(lat, lon) {\n        fetch(`https://api.openweathermap.org/data/3.0/onecall?lat=${lat}&lon=${lon}&exclude=${current}&appid=${ad14089cb0bfefe6bd1b977b00f4f4b0}&units=metric`)\n        .then(res => res.json())\n        .then(data => {\n            console.log(data);\n            if (data && data.main && data.main.temp && data.weather && data.weather.length > 0) {\n                const temp = data.main.temp;\n                const weathers = data.weather[data.weather.length - 1];\n                setTemp(temp);\n                setWeather(weathers.main);\n            } else {\n                console.log('Weather data is incomplete.');\n            }\n        })\n        .catch(error => {\n            console.log('Error fetching weather data:', error);\n        });\n    }\n\n    useEffect(() => {\n        requestCoords();\n    }, []);\n}\n\nexport default Weatherapi;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAGlD,SAASC,UAAUA,CAAA,EAAE;EAAAC,EAAA;EACjB,MAAM,CAACC,MAAM,EAAEC,UAAU,CAAC,GAAGL,QAAQ,CAAC,CAAC;EACvC,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,CAAC;EAClC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAExC,SAASU,aAAaA,CAACC,QAAQ,EAAE;IAC7BC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;IACrB,MAAMG,QAAQ,GAAGH,QAAQ,CAACP,MAAM,CAACU,QAAQ,CAAC,CAAE;IAC5C,MAAMC,SAAS,GAAGJ,QAAQ,CAACP,MAAM,CAACW,SAAS,CAAC,CAAE;IAC9C,MAAMC,SAAS,GAAG;MAClBF,QAAQ;MACRC;IACA,CAAC;IACDV,UAAU,CAACW,SAAS,CAAC;IACrBC,UAAU,CAACH,QAAQ,EAAEC,SAAS,CAAC;EACnC;EAEA,SAASG,YAAYA,CAACC,GAAG,EAAE;IACvBP,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGM,GAAG,CAAC;EAClC;EAEA,SAASC,aAAaA,CAAA,EAAG;IACrBC,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACb,aAAa,EAAEQ,YAAY,CAAC;EACzE;EAEA,SAASD,UAAUA,CAACO,GAAG,EAAEC,GAAG,EAAE;IAC1BC,KAAK,CAAE,uDAAsDF,GAAI,QAAOC,GAAI,YAAWE,OAAQ,UAASC,gCAAiC,eAAc,CAAC,CACvJC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAI;MACVpB,OAAO,CAACC,GAAG,CAACmB,IAAI,CAAC;MACjB,IAAIA,IAAI,IAAIA,IAAI,CAACC,IAAI,IAAID,IAAI,CAACC,IAAI,CAAC3B,IAAI,IAAI0B,IAAI,CAACxB,OAAO,IAAIwB,IAAI,CAACxB,OAAO,CAAC0B,MAAM,GAAG,CAAC,EAAE;QAChF,MAAM5B,IAAI,GAAG0B,IAAI,CAACC,IAAI,CAAC3B,IAAI;QAC3B,MAAM6B,QAAQ,GAAGH,IAAI,CAACxB,OAAO,CAACwB,IAAI,CAACxB,OAAO,CAAC0B,MAAM,GAAG,CAAC,CAAC;QACtD3B,OAAO,CAACD,IAAI,CAAC;QACbG,UAAU,CAAC0B,QAAQ,CAACF,IAAI,CAAC;MAC7B,CAAC,MAAM;QACHrB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAC9C;IACJ,CAAC,CAAC,CACDuB,KAAK,CAACC,KAAK,IAAI;MACZzB,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEwB,KAAK,CAAC;IACtD,CAAC,CAAC;EACN;EAEApC,SAAS,CAAC,MAAM;IACZmB,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;AACV;AAACjB,EAAA,CA/CQD,UAAU;AAAAoC,EAAA,GAAVpC,UAAU;AAiDnB,eAAeA,UAAU;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}